// ignore_for_file: avoid_print

import 'dart:convert';
// ignore: avoid_web_libraries_in_flutter
import 'dart:html' as html;
import 'dart:typed_data';
import 'package:crypto/crypto.dart';
import 'package:http/http.dart' as http;
import 'package:creta01/common/util/logger.dart';
import 'package:creta01/model/contents.dart';
import 'package:synchronized/synchronized.dart';
import '../common/util/config.dart';
import '../studio/studio_main_screen.dart';

class CretaStorage {
  final String nrServerUrl = CretaConfig.storageServer;

  String errMsg = "";
  String remoteUrl = '';
  String thumbnail = '';
  String alreadyExist = 'false';

  int successChunkId = 0;
  final Lock _idLock = Lock();

  void upload(ContentsModel contents,
      {required void Function(int fileSize, double progress) onProgress,
      required void Function(String, String) onComplete,
      required void Function(String errMsg) onError}) {
    logHolder.log('upload', level: 5);
    if (contents.file == null) {
      logHolder.log('file is null', level: 6);
      return;
    }
    _fileUpload(contents.file!, studioMainHolder!.user.id, onProgress, onComplete, onError);
  }

  //파일의 기본 정보를 구하고, Uint8List 형태로 바꾸는 메서드
  void _fileUpload(
      html.File file,
      String userId,
      void Function(int fileSize, double progress) onProgress,
      void Function(String, String) onComplete,
      void Function(String errMsg) onError) {
    //파일 이름 구하기
    String fileName = "${file.size}_${file.name}";
    Uint8List? fileBytes;
    //파일 Uint8List로 변환
    logHolder.log('111111', level: 5);

    html.FileReader reader = html.FileReader();
    //reader.readAsDataUrl(file);

    reader.onLoadEnd.listen((event) async {
      fileBytes = reader.result as Uint8List;
      if (fileBytes == null) {
        errMsg = 'reader failed, Uint8List is null';
        logHolder.log(errMsg, level: 6);
        onError(errMsg);
        return;
      }
      int fileSize = fileBytes!.lengthInBytes;
      // 한방에 다 보내는 케이스  10MB 이내 Case
      if (fileSize <= 1024 * 1024 * 10) {
        _uploadReq(userId, fileName, base64Encode(fileBytes!), 0,
                md5.convert(utf8.encode(base64Encode(fileBytes!))).toString())
            .then((value) {
          if (value == true) {
            onProgress(fileSize, 100);
          }
          if (errMsg.isEmpty && remoteUrl.isNotEmpty && thumbnail.isNotEmpty) {
            onComplete(remoteUrl, thumbnail);
          } else {
            onError(errMsg);
          }
        });
        return;
      }
      _chunkFile(
          userId,
          fileName,
          fileBytes!,
          1, // 최초 ChunkId
          fileSize,
          0, // 최초 offset
          onProgress,
          onComplete,
          onError);
    });
    reader.onError.listen((event) {
      errMsg = event.toString();
      logHolder.log('onError $errMsg', level: 6);
      onError(errMsg);
    });
    reader.readAsArrayBuffer(file);
  }

  Future<void> setSuccessId(int id) async {
    _idLock.synchronized(() async {
      successChunkId = id;
    });
  }

  Future<int> getSuccessId() async {
    return _idLock.synchronized(() async {
      return successChunkId;
    });
  }

  // 요청 파라미터에 들어갈 데이터 가공하는 메서드
  void _chunkFile(
      String userId,
      String fileName,
      Uint8List fileBytes,
      int chunkId,
      int fileSize,
      int offset,
      void Function(int fileSize, double progress) onProgress,
      void Function(String, String) onComplete,
      void Function(String errMsg) onError) {
    logHolder.log('_chunkFile($fileSize)', level: 5);

    const int chunkSize = 10485720;
    double progress = 0;

    print("이 파일은 10MB 이상입니다.");
    int start = 0;
    int end = 0;

    //for (int i = 0; i < fileSize; i += chunkSize) {
    // 파일을 1MB씩 분할
    start = offset;
    end = start + chunkSize > fileSize ? fileSize : start + chunkSize;
    //분할한 파일을 base64형태로 인코딩
    String stream = base64Encode(fileBytes.sublist(start, end));

    _uploadReq(userId, fileName, stream, chunkId, md5.convert(utf8.encode(stream)).toString())
        .then((value) {
      if (value == false) {
        onProgress(fileSize, progress); // 실패
        return;
      }
      if (alreadyExist == 'true') {
        logHolder.log("alreadyExist ! $fileName", level: 5);
        onProgress(fileSize, 100);
        if (errMsg.isEmpty && remoteUrl.isNotEmpty && thumbnail.isNotEmpty) {
          onComplete(remoteUrl, thumbnail);
        } else {
          onError(errMsg);
        }
        return;
      }
      progress = ((offset + chunkSize).toDouble() / fileSize.toDouble()) * 100.0;
      progress > 100 ? 100 : progress;
      logHolder.log('progress=$progress', level: 5);
      onProgress(fileSize, progress);
      chunkId += 1;
      offset += chunkSize;
      if (offset >= fileSize) {
        if (errMsg.isEmpty && remoteUrl.isNotEmpty && thumbnail.isNotEmpty) {
          onComplete(remoteUrl, thumbnail);
        } else {
          onError(errMsg);
        }
        return; // 재귀함수의 탈출조건
      }
      _chunkFile(
        userId,
        fileName,
        fileBytes,
        chunkId,
        fileSize,
        offset,
        onProgress,
        onComplete,
        onError,
      );
    });
  }

  //request를 요청하는 메서드
  Future<bool> _uploadReq(
      String userId, String fileName, String stream, int chunkId, String checkSum) async {
    String input =
        '{"userId" : "$userId",  "filename" : "$fileName", "file" : "$stream", "chunkId" : "$chunkId", "checkSum" : "$checkSum" }';

    logHolder.log('$nrServerUrl , $fileName', level: 5);

    try {
      // http.Response response = await http.post(
      //   Uri.parse(nrServerUrl),
      //   headers: {"Content-type": "application/json"},
      //   body: input,
      // );

      return http
          .post(
        Uri.parse(nrServerUrl),
        headers: {"Content-type": "application/json"},
        body: input,
      )
          .then((response) {
        if (response.statusCode == 200) {
          print(response.statusCode);
          print(response.body);
          dynamic retval = jsonDecode(response.body);
          if (retval["error"] != null && retval["error"]!.isNotEmpty) {
            errMsg = retval["error"]!;
            logHolder.log('error !!!! : $errMsg', level: 5);
            return false;
          }
          setSuccessId(chunkId);
          if (retval["media"] != null && retval["media"]!.isNotEmpty) {
            remoteUrl = retval["media"]!;
          }
          if (retval["thumbnail"] != null && retval["thumbnail"]!.isNotEmpty) {
            thumbnail = retval["thumbnail"]!;
          }
          if (retval["alreadyExist"] != null && retval["alreadyExist"]!.isNotEmpty) {
            alreadyExist = retval["alreadyExist"]!;
          }
          return true;
        }
        errMsg = '${response.statusCode} : ${response.body.toString()}';
        return false;
      });
    } catch (e) {
      errMsg = e.toString();
      return false;
    }
  }
}
